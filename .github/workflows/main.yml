name: Windows RDP with Ngrok and Tor

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download Latest Ngrok
      run: Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
      shell: powershell

    - name: Extract Ngrok
      run: Expand-Archive -Path "ngrok.zip" -DestinationPath "."
      shell: powershell

    - name: Kill Existing Ngrok Sessions
      run: .\ngrok.exe kill
      shell: powershell
      continue-on-error: true

    - name: Authenticate Ngrok
      run: .\ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
      shell: powershell

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
      shell: powershell

    - name: Change User Password
      run: |
        $password = ConvertTo-SecureString -AsPlainText "@cyb3rking" -Force
        Set-LocalUser -Name "runneradmin" -Password $password
      shell: powershell

    - name: Download and Install Tor
      run: |
        $torVersion = (Invoke-RestMethod -Uri "https://dist.torproject.org/torbrowser/" | Select-String -Pattern 'torbrowser-install-win64-[0-9\.]+_ALL.exe' | Select-Object -First 1).Matches.Value
        if (-not $torVersion) { throw "Failed to fetch Tor version!" }
        $torURL = "https://dist.torproject.org/torbrowser/$torVersion"
        Invoke-WebRequest -Uri $torURL -OutFile "tor_installer.exe"
        Start-Process -FilePath ".\tor_installer.exe" -ArgumentList "/S" -NoNewWindow -Wait
      shell: powershell

    - name: Start Ngrok Tunnel
      run: .\ngrok.exe tcp 3389
      shell: powershell

    # ---- Uncomment the timeout you want to use ----
    - name: Set Timeout (1 min)
      run: Start-Sleep -Seconds 60
      shell: powershell
    # - name: Set Timeout (2 mins)
    #   run: Start-Sleep -Seconds 120
    #   shell: powershell
    # - name: Set Timeout (3 mins)
    #   run: Start-Sleep -Seconds 180
    #   shell: powershell
    # - name: Set Timeout (4 mins)
    #   run: Start-Sleep -Seconds 240
    #   shell: powershell
    # - name: Set Timeout (5 mins)
    #   run: Start-Sleep -Seconds 300
    #   shell: powershell
